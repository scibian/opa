Description: Port necessary pieces of the comp...pl scripts
 opaconfig uses the comp...pl scripts installed by individual packages
 to override its default behavior. This patch ports the necessary pieces
 to Debian. For the most part, this involves use of dpkg instead of rpm.
 .
 . opa (10.5.0.0-140-2ifs) UNRELEASED; urgency=medium
 .
 .  * Port functionality of comp_fastfabric.pl required by opaconfig to Debian.
 
Author: Brian T. Smith <bsmith@systemfabricworks.com>
Copyright: 2017 System Fabric Works, Inc. All Rights Reserved.
Forwarded: no
Last-Update: <2017-10-04>

---

--- a/CommonInstall/comp_fastfabric.pl
+++ b/CommonInstall/comp_fastfabric.pl
@@ -42,6 +42,10 @@
 my $FF_TLS_CONF_FILE = "/etc/opa/opaff.xml";
 sub available_fastfabric
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "available_fastfabric unimplemented\n";
+		exit(1);
+	}
 	my $srcdir=$ComponentInfo{'fastfabric'}{'SrcDir'};
 	return ((rpm_resolve("$srcdir/RPMS/*/", "any", "opa-basic-tools") ne "") &&
 			(rpm_resolve("$srcdir/RPMS/*/", "any", "opa-fastfabric") ne ""));
@@ -49,12 +53,19 @@
 
 sub installed_fastfabric
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		return(system("$DPKG_QUERY -W -f '\${db:Status-Abbrev}\\n' opa-fastfabric | grep -q ^ii > /dev/null") == 0);
+	}
 	return(system("rpm -q --quiet opa-fastfabric") == 0)
 }
 
 # only called if installed_fastfabric is true
 sub installed_version_fastfabric
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		my $version = dpkg_query_version_release_pkg("opa-fastfabric");
+		return dot_version("$version");
+	}
 	my $version = rpm_query_version_release_pkg("opa-fastfabric");
 	return dot_version("$version");
 }
@@ -62,12 +73,20 @@
 # only called if available_fastfabric is true
 sub media_version_fastfabric
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "media_version_fastfabric unimplemented\n";
+		exit(1);
+	}
 	my $srcdir=$ComponentInfo{'fastfabric'}{'SrcDir'};
 	return `cat "$srcdir/version"`;
 }
 
 sub build_fastfabric
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "build_fastfabric unimplemented\n";
+		exit(1);
+	}
 	my $osver = $_[0];
 	my $debug = $_[1];	# enable extra debug of build itself
 	my $build_temp = $_[2];	# temp area for use by build
@@ -77,6 +96,10 @@
 
 sub need_reinstall_fastfabric($$)
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "need_reinstall_fastfabric unimplemented\n";
+		exit(1);
+	}
 	my $install_list = shift();	# total that will be installed when done
 	my $installing_list = shift();	# what items are being installed/reinstalled
 
@@ -85,11 +108,19 @@
 
 sub check_os_prereqs_fastfabric
 {	
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "check_os_prereqs_fastfabric unimplemented\n";
+		exit(1);
+	}
 	return rpm_check_os_prereqs("fastfabric", "user");
 }
 
 sub preinstall_fastfabric
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "preinstall_fastfabric unimplemented\n";
+		exit(1);
+	}
 	my $install_list = $_[0];	# total that will be installed when done
 	my $installing_list = $_[1];	# what items are being installed/reinstalled
 
@@ -98,6 +129,10 @@
 
 sub install_fastfabric
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "install_fastfabric unimplemented\n";
+		exit(1);
+	}
 	my $install_list = $_[0];	# total that will be installed when done
 	my $installing_list = $_[1];	# what items are being installed/reinstalled
 
@@ -143,6 +178,10 @@
 
 sub postinstall_fastfabric
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "postinstall_fastfabric unimplemented\n";
+		exit(1);
+	}
 	my $install_list = $_[0];	# total that will be installed when done
 	my $installing_list = $_[1];	# what items are being installed/reinstalled
 }
@@ -152,8 +191,11 @@
 	my $install_list = $_[0];	# total that will be left installed when done
 	my $uninstalling_list = $_[1];	# what items are being uninstalled
 
-
-	rpm_uninstall_list("any", "verbose", ("opa-mpi-apps", "opa-fastfabric") );
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		dpkg_uninstall_list("any", "verbose", ("opa-mpi-apps", "opa-fastfabric") );
+	} else {
+		rpm_uninstall_list("any", "verbose", ("opa-mpi-apps", "opa-fastfabric") );
+	}
 
 	NormalPrint("Uninstalling $ComponentInfo{'fastfabric'}{'Name'}...\n");
 	remove_conf_file("$ComponentInfo{'fastfabric'}{'Name'}", "$FF_CONF_FILE");
@@ -178,6 +220,10 @@
 
 sub available_opamgt_sdk
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "available_opamgt_sdk unimplemented\n";
+		exit(1);
+	}
 	my $srcdir = $ComponentInfo{'opamgt_sdk'}{'SrcDir'};
 	return ( rpm_exists("$srcdir/RPMS/*/", "any", "opa-libopamgt-devel") &&
 		     rpm_exists("$srcdir/RPMS/*/", "any", "opa-libopamgt"));
@@ -185,17 +231,28 @@
 
 sub installed_opamgt_sdk
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		return ( dpkg_is_installed("libopamgt-dev", "any") &&
+				 dpkg_is_installed("libopamgt0", "any"));
+	}
 	return ( rpm_is_installed("opa-libopamgt-devel", "any") &&
 		     rpm_is_installed("opa-libopamgt", "any"));
 }
 
 sub installed_version_opamgt_sdk
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		return dpkg_query_version_release_pkg("libopamgt-dev");
+	}
 	return rpm_query_version_release_pkg("opa-libopamgt-devel");
 }
 
 sub media_version_opamgt_sdk
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "media_version_opamgt_sdk unimplemented\n";
+		exit(1);
+	}
 	my $srcdir = $ComponentInfo{'opamgt_sdk'}{'SrcDir'};
 	my $rpm = rpm_resolve("$srcdir/RPMS/*/", "any", "opa-libopamgt-devel");
 	return rpm_query_version_release($rpm);
@@ -213,6 +270,10 @@
 
 sub check_os_prereqs_opamgt_sdk
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "check_os_prereqs_opamgt_sdk unimplemented\n";
+		exit(1);
+	}
 	rpm_check_os_prereqs("opa-libopamgt", "any");
 }
 
@@ -223,6 +284,10 @@
 
 sub install_opamgt_sdk
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "install_opamgt_sdk unimplemented\n";
+		exit(1);
+	}
 	my $install_list = $_[0];       # total that will be installed when done
 	my $installing_list = $_[1];    # what items are being installed/reinstalled
 
@@ -245,6 +310,10 @@
 
 sub uninstall_opamgt_sdk
 {
-	rpm_uninstall_all_list("any", "verbose", ("opa-libopamgt-devel", "opa-libopamgt") );
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		dpkg_uninstall_all_list("any", "verbose", ("libopamgt-dev", "libopamgt0") );
+	} else {
+		rpm_uninstall_all_list("any", "verbose", ("opa-libopamgt-devel", "opa-libopamgt") );
+	}
 	$ComponentWasInstalled{'opamgt_sdk'}=0;
 }
--- a/CommonInstall/comp_oftools.pl
+++ b/CommonInstall/comp_oftools.pl
@@ -49,31 +49,51 @@
 
 sub available_oftools
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "available_oftools unimplemented\n";
+		exit(1);
+	}
 	my $srcdir=$ComponentInfo{'oftools'}{'SrcDir'};
 	return (rpm_resolve("$srcdir/RPMS/*/", "any", "opa-basic-tools") ne "" );
 }
 
 sub installed_oftools
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		return(system("$DPKG_QUERY -W -f '\${db:Status-Abbrev}\\n' opa-basic-tools | grep -q ^ii > /dev/null") == 0);
+	}
 	return(system("rpm -q --quiet opa-basic-tools") == 0)
 }
 
 # only called if installed_oftools is true
 sub installed_version_oftools
 {
-	my $version = rpm_query_version_release_pkg("opa-basic-tools");
-	return dot_version("$version");
+	my $version;
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		$version = dpkg_query_version_release_pkg("opa-basic-tools");
+	} else {
+		$version = rpm_query_version_release_pkg("opa-basic-tools");
+	}
+ 	return dot_version("$version");
 }
 
 # only called if available_oftools is true
 sub media_version_oftools
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "media_version_oftools unimplemented\n";
+		exit(1);
+	}
 	my $srcdir=$ComponentInfo{'oftools'}{'SrcDir'};
 	return `cat "$srcdir/version"`;
 }
 
 sub build_oftools
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "build_oftools unimplemented\n";
+		exit(1);
+	}
 	my $osver = $_[0];
 	my $debug = $_[1];	# enable extra debug of build itself
 	my $build_temp = $_[2];	# temp area for use by build
@@ -83,6 +103,10 @@
 
 sub need_reinstall_oftools($$)
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "need_reinstall_oftools unimplemented\n";
+		exit(1);
+	}
 	my $install_list = shift();	# total that will be installed when done
 	my $installing_list = shift();	# what items are being installed/reinstalled
 
@@ -91,6 +115,10 @@
 
 sub preinstall_oftools
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "preinstall_oftools unimplemented\n";
+		exit(1);
+	}
 	my $install_list = $_[0];	# total that will be installed when done
 	my $installing_list = $_[1];	# what items are being installed/reinstalled
 
@@ -99,6 +127,10 @@
 
 sub install_oftools
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "install_oftools unimplemented\n";
+		exit(1);
+	}
 	my $install_list = $_[0];	# total that will be installed when done
 	my $installing_list = $_[1];	# what items are being installed/reinstalled
 
@@ -132,6 +164,10 @@
 
 sub postinstall_oftools
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "postinstall_oftools unimplemented\n";
+		exit(1);
+	}
 	my $install_list = $_[0];	# total that will be installed when done
 	my $installing_list = $_[1];	# what items are being installed/reinstalled
 }
@@ -143,7 +179,11 @@
 
 	NormalPrint("Uninstalling $ComponentInfo{'oftools'}{'Name'}...\n");
 
-	rpm_uninstall_list("any", "verbose", ("opa-basic-tools", "opa-address-resolution") );
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		dpkg_uninstall_list("any", "verbose", ("opa-basic-tools", "opa-address-resolution"));
+	} else {
+		rpm_uninstall_all_list("any", "verbose", ("opa-libopamgt-devel", "opa-libopamgt") );
+	}
 
 	# remove LSF and Moab related files
 	system("rm -rf $ROOT/usr/lib/opa/LSF_scripts");
@@ -166,5 +206,9 @@
 
 sub check_os_prereqs_oftools
 {
+	if ("$CUR_DISTRO_VENDOR" eq 'debian') {
+		printf "check_os_prereqs_oftools unimplemented\n";
+		exit(1);
+	}
 	return rpm_check_os_prereqs("oftools", "user");
 }
